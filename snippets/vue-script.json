{
    "ss-ref": {
        "prefix": "ss-ref",
        "body": [
            "const $1 = ref($2)"
        ],
        "description": "ref"
    },
    "ss-ref-ts": {
        "prefix": "ss-ref-ts",
        "body": [
            "const $1: Ref<$2> = ref($3)"
        ],
        "description": "ref with typescript"
    },
    "ss-props": {
        "prefix": "ss-props",
        "body": [
            "const $1 = defineProps<$2>()"
        ],
        "description": "props"
    },
    "ss-props-ts": {
        "prefix": "ss-props-ts",
        "body": [
            "const $1 = defineProps<$2>()"
        ],
        "description": "props with typescript"
    },
    "ss-emit": {
        "prefix": "ss-emit",
        "body": [
            "const $1 = defineEmit<$2>()"
        ],
        "description": "emit"
    },
    "ss-emit-ts": {
        "prefix": "ss-emit-ts",
        "body": [
            "const $1 = defineEmit<$2>()"
        ],
        "description": "emit with typescript"
    },
    "ss-context": {
        "prefix": "ss-context",
        "body": [
            "const $1 = defineContext<$2>()"
        ],
        "description": "context"
    },
    "ss-context-ts": {
        "prefix": "ss-context-ts",
        "body": [
            "const $1 = defineContext<$2>()"
        ],
        "description": "context with typescript"
    },
    "ss-computed": {
        "prefix": "ss-computed",
        "body": [
            "const $1 = computed(() => $2)"
        ],
        "description": "computed"
    },
    "ss-computed-ts": {
        "prefix": "ss-computed-ts",
        "body": [
            "const $1: Ref<$2> = computed(() => $3)"
        ],
        "description": "computed with typescript"
    },
    "ss-watch": {
        "prefix": "ss-watch",
        "body": [
            "watch($1, ($2) => {",
            "  $3",
            "})"
        ],
        "description": "watch"
    },
    "ss-watch-getter": {
        "prefix": "ss-watch-getter",
        "body": [
            "watch(()=>$1, ($2) => {",
            "  $3",
            "})"
        ],
        "description": "watch with getter"
    },
    "ss-ronly": {
        "prefix": "ss-ronly",
        "body": [
            "const $1 = readonly($2)"
        ],
        "description": "readonly"
    },
    "ss-ronly-ts": {
        "prefix": "ss-ronly-ts",
        "body": [
            "const $1: Readonly<Ref<$2>> = readonly($3)"
        ],
        "description": "readonly with typescript"
    },
    "ss-weffect": {
        "prefix": "ss-weffect",
        "body": [
            "watchEffect(() => {",
            "  $1",
            "})"
        ],
        "description": "watchEffect"
    },
    "ss-wpeffect": {
        "prefix": "ss-wpeffect",
        "body": [
            "watchPostEffect(() => {",
            "  $1",
            "})"
        ],
        "description": "watchPostEffect"
    },
    "ss-wseffect": {
        "prefix": "ss-wseffect",
        "body": [
            "watchSyncEffect(() => {",
            "  $1",
            "})"
        ],
        "description": "watchSyncEffect"
    },
    "ss-prvd": {
        "prefix": "ss-prvd",
        "body": [
            "const $1 = provide($2, $3)"
        ],
        "description": "provide"
    },
    "ss-prvd-ts": {
        "prefix": "ss-prvd-ts",
        "body": [
            "const $1: InjectionKey<$2> = provide($3, $4)"
        ],
        "description": "provide with typescript"
    },
    "ss-inject": {
        "prefix": "ss-inject",
        "body": [
            "const $1 = inject($2, $3)"
        ],
        "description": "inject"
    },
    "ss-inject-ts": {
        "prefix": "ss-inject-ts",
        "body": [
            "const $1: Ref<$2> = inject($3, $4)"
        ],
        "description": "inject with typescript"
    },
    "ss-mnt": {
        "prefix": "ss-mnt",
        "body": [
            "onMounted(() => {",
            "  $1",
            "})"
        ],
        "description": "mounted"
    },
    "ss-upd": {
        "prefix": "ss-upd",
        "body": [
            "onUpdated(() => {",
            "  $1",
            "})"
        ],
        "description": "updated"
    },
    "ss-umnt": {
        "prefix": "ss-umnt",
        "body": [
            "onUnmounted(() => {",
            "  $1",
            "})"
        ],
        "description": "unmounted"
    },
    "ss-bmnt": {
        "prefix": "ss-bmnt",
        "body": [
            "onBeforeMount(() => {",
            "  $1",
            "})"
        ],
        "description": "beforeMount"
    },
    "ss-bupd": {
        "prefix": "ss-bupd",
        "body": [
            "onBeforeUpdate(() => {",
            "  $1",
            "})"
        ],
        "description": "beforeUpdate"
    },
    "ss-bumnt": {
        "prefix": "ss-bumnt",
        "body": [
            "onBeforeUnmount(() => {",
            "  $1",
            "})"
        ],
        "description": "beforeUnmount"
    },
    "ss-err": {
        "prefix": "ss-err",
        "body": [
            "onErrorCaptured(() => {",
            "  $1",
            "})"
        ],
        "description": "onErrorCaptured"
    },
    "ss-rtrk": {
        "prefix": "ss-rtrk",
        "body": [
            "onRenderTracked(() => {",
            "  $1",
            "})"
        ],
        "description": "onRenderTracked"
    },
    "ss-rtrg": {
        "prefix": "ss-rtrg",
        "body": [
            "onRenderTriggered(() => {",
            "  $1",
            "})"
        ],
        "description": "onRenderTriggered"
    },
    "ss-act": {
        "prefix": "ss-act",
        "body": [
            "onActivated(() => {",
            "  $1",
            "})"
        ],
        "description": "onActivated"
    },
    "ss-dact": {
        "prefix": "ss-dact",
        "body": [
            "onDeactivated(() => {",
            "  $1",
            "})"
        ],
        "description": "onDeactivated"
    },
    "ss-spf": {
        "prefix": "ss-spf",
        "body": [
            "onServerPrefetch(() => {",
            "  $1",
            "})"
        ],
        "description": "onServerPrefetch"
    },
    "ss-isref": {
        "prefix": "ss-isref",
        "body": [
            "isRef($1)"
        ],
        "description": "isRef"
    },
    "ss-unref": {
        "prefix": "ss-unref",
        "body": [
            "unref($1)"
        ],
        "description": "unref"
    },
    "ss-toref": {
        "prefix": "ss-toref",
        "body": [
            "toRef($1, $2)"
        ],
        "description": "toRef"
    },
    "ss-torefs": {
        "prefix": "ss-torefs",
        "body": [
            "toRefs($1)"
        ],
        "description": "toRefs"
    },
    "ss-isprx": {
        "prefix": "ss-isproxy",
        "body": [
            "isProxy($1)"
        ],
        "description": "isProxy"
    },
    "ss-isrct": {
        "prefix": "ss-isrct",
        "body": [
            "isReactive($1)"
        ],
        "description": "isReactive"
    },
    "ss-isrdo": {
        "prefix": "ss-isrdo",
        "body": [
            "isReadonly($1)"
        ],
        "description": "isReadonly"
    },
    "ss-ssref": {
        "prefix": "ss-ssref",
        "body": [
            "shallowRef($1)"
        ],
        "description": "shallowRef"
    },
    "ss-trref": {
        "prefix": "ss-trref",
        "body": [
            "triggerRef($1)"
        ],
        "description": "triggerRef"
    },
    "ss-csref": {
        "prefix": "ss-csref",
        "body": [
            "customRef(($1) => {",
            "  return {",
            "    get: () => $2,",
            "    set: ($3) => $4",
            "  }",
            "})"
        ],
        "description": "customRef"
    },
    "ss-ssrct": {
        "prefix": "ss-ssrct",
        "body": [
            "shallowReactive($1)"
        ],
        "description": "shallowReactive"
    },
    "ss-ssrdo": {
        "prefix": "ss-ssrdo",
        "body": [
            "shallowReadonly($1)"
        ],
        "description": "shallowReadonly"
    },
    "ss-toraw": {
        "prefix": "ss-toraw",
        "body": [
            "toRaw($1)"
        ],
        "description": "toRaw"
    },
    "ss-mkraw": {
        "prefix": "ss-mkraw",
        "body": [
            "markRaw($1)"
        ],
        "description": "markRaw"
    },
    "ss-efscp": {
        "prefix": "ss-efscp",
        "body": [
            "effectScope(($1) => {",
            "  $2",
            "})"
        ],
        "description": "effectScope"
    },
    "ss-curscp": {
        "prefix": "ss-curscp",
        "body": [
            "getCurrentScope()"
        ],
        "description": "getCurrentScope"
    },
    "ss-ondscp": {
        "prefix": "ss-ondscp",
        "body": [
            "onScopeDispose(() => {",
            "  $1",
            "})"
        ],
        "description": "onScopeDispose"
    }
}